[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-09-12 16:03:07.507867",
  "module": "Metro Custom App",
  "name": "PE Fetch Supplier Details",
  "script": "frappe.ui.form.on('Payment Entry', {\r\n    party: function(frm) {\r\n        if (frm.doc.party_type == 'Supplier' && frm.doc.party) {\r\n            frappe.call({\r\n                method: \"frappe.client.get\",\r\n                args: {\r\n                    doctype: \"Supplier\",\r\n                    name: frm.doc.party\r\n                },\r\n                callback: function(r) {\r\n                    if(r.message) {\r\n                        frm.set_value('custom_beneficiary_bank_name', r.message.custom_beneficiary_bank_name_);\r\n                        frm.set_value('custom_beneficiary_account_name', r.message.custom_beneficiary_account_name);\r\n                        frm.set_value('custom_beneficiary_account_number', r.message.custom_beneficiary_account_number);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leasing",
  "enabled": 1,
  "modified": "2024-03-19 15:16:48.102584",
  "module": "Metro Custom App",
  "name": "LSE",
  "script": "frappe.ui.form.on('Leasing', {\r\nrefresh: function(frm) {\r\n        if (frm.is_new()) {\r\n            frm.add_custom_button(__('Get Invoice'), function() {\r\n                insertItemsFromPurchaseInvoice(frm);\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfunction insertItemsFromPurchaseInvoice(frm) {\r\n    if (!frm.doc.invoice) {\r\n        frappe.msgprint('Please select an invoice first');\r\n        return;\r\n    }\r\n\r\n    frappe.db.get_doc('Purchase Invoice', frm.doc.invoice)\r\n        .then(function(invoice) {\r\n            frm.set_value('court_name', invoice.custom_court);\r\n            frm.set_value('account_name', invoice.custom_beneficiary_account_name);\r\n            frm.set_value('invoice', invoice.name);\r\n            frm.set_value('supplier', invoice.supplier);\r\n            frm.set_value('account_number', invoice.custom_landlord_account_number);\r\n            frm.set_value('bank', invoice.custom_landlord_bank_name);\r\n            frm.set_value('tenant_name', invoice.custom_customer_name);\r\n            frm.set_value('amount_figures', invoice.outstanding_amount);\r\n\r\n            // Convert outstanding_amount to words\r\n            var amountInWords = convertAmountToWords(invoice.outstanding_amount);\r\n            frm.set_value('amount_in_word', amountInWords);\r\n        })\r\n        .catch(function(err) {\r\n            frappe.msgprint('Error: ' + err);\r\n        });\r\n}\r\n\r\nfunction convertAmountToWords(amount) {\r\n    var words = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\r\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n    ];\r\n\r\n    var tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\r\n\r\n    var scales = [\"\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\"];\r\n\r\n    function convertGroup(number, scale) {\r\n        var result = \"\";\r\n\r\n        if (number > 99) {\r\n            result += words[Math.floor(number / 100)] + \" Hundred \";\r\n            number %= 100;\r\n        }\r\n\r\n        if (number > 19) {\r\n            result += tens[Math.floor(number / 10)] + \" \";\r\n            number %= 10;\r\n        }\r\n\r\n        if (number > 0) {\r\n            result += words[number] + \" \";\r\n        }\r\n\r\n        if (scale > 0) {\r\n            result += scales[scale] + \" \";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    if (amount === 0) {\r\n        return \"Zero\";\r\n    }\r\n\r\n    var numArray = amount.toString().split('.');\r\n    var wholeNumber = numArray[0];\r\n    var decimalNumber = numArray.length > 1 ? numArray[1] : \"00\";\r\n\r\n    var result = \"\";\r\n\r\n    if (wholeNumber.length > 15) {\r\n        return \"Number too large\";\r\n    }\r\n\r\n    var groups = [];\r\n    while (wholeNumber.length > 0) {\r\n        groups.unshift(wholeNumber.slice(-3));\r\n        wholeNumber = wholeNumber.slice(0, -3);\r\n    }\r\n\r\n    for (var i = 0; i < groups.length; i++) {\r\n        if (groups[i] !== \"000\") {\r\n            result += convertGroup(parseInt(groups[i], 10), groups.length - i - 1);\r\n        }\r\n    }\r\n\r\n    result += \"Naira \";\r\n\r\n    if (decimalNumber !== \"00\") {\r\n        result += \"and \" + tens[parseInt(decimalNumber[0])] + \" \" + words[parseInt(decimalNumber[1])] + \" Kobo\";\r\n    }\r\n\r\n    return result.trim();\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-09-27 13:12:44.724264",
  "module": "Metro Custom App",
  "name": "PINV LSE",
  "script": "frappe.ui.form.on('Purchase Invoice', {\r\n    refresh: function(frm) {\r\n        // Check if the document is submitted (docstatus == 1)\r\n        if (frm.doc.docstatus == 1 && frm.doc.outstanding_amount > 0) {\r\n\r\n            // Add custom button to create Lease Requisition\r\n            frm.add_custom_button(__('Create Lease Requisition'), function() {\r\n                frappe.model.with_doctype('Leasing', function() {\r\n                    var lse = frappe.model.get_new_doc('Leasing');\r\n                    lse.court_name = frm.doc.custom_court;\r\n                    lse.account_name = frm.doc.custom_beneficiary_account_name;\r\n                    lse.invoice = frm.doc.name;\r\n                    lse.supplier = frm.doc.supplier;\r\n                    lse.account_number = frm.doc.custom_landlord_account_number;\r\n                    lse.bank = frm.doc.custom_landlord_bank_name;\r\n                    lse.tenant_name = frm.doc.custom_customer_name;\r\n                    lse.amount_figures = frm.doc.outstanding_amount;\r\n                    \r\n                    lse.amount_in_word = frm.doc.in_words;\r\n                         // Only update the amount_in_words if it's not already set\r\n                    const amount = frm.doc.outstanding_amount; // Get the amount from the form\r\n                    \r\n                    if (amount) { // Check if 'amount_in_words' is empty\r\n            \r\n                     lse.amount_in_word = formatAmount(amount);\r\n                    }\r\n\r\n                    frappe.set_route('Form', 'Leasing', lse.name);\r\n                });\r\n            }, __(\"Requistions\"));\r\n\r\n            // Add custom button to create Commission Voucher\r\n            frm.add_custom_button(__('Create Commission Voucher'), function() {\r\n                frappe.model.with_doctype('Commision Voucher', function() {\r\n                    var lse = frappe.model.get_new_doc('Commision Voucher');\r\n                    lse.court = frm.doc.custom_court;\r\n                    lse.account_name = frm.doc.custom_beneficiary_account_name;\r\n                    lse.invoice = frm.doc.name;\r\n                    lse.sales_order_no = frm.doc.custom_sales_order_id;\r\n                    lse.client = frm.doc.supplier;\r\n                    lse.commision_due = frm.doc.custom_commission_rate\r\n                    lse.account_number = frm.doc.custom_landlord_account_number;\r\n                    lse.bank = frm.doc.custom_landlord_bank_name;\r\n                    lse.beneficiary = frm.doc.supplier;\r\n                    lse.grand_total = frm.doc.custom_invoice_grand_total;\r\n                    lse.tax = frm.doc.taxes_and_charges_added;\r\n\r\n                    // Copy items from Purchase Invoice to Commission Voucher\r\n                    frm.doc.items.forEach(function(item) {\r\n                        var voucher_detail = frappe.model.add_child(lse, 'Voucher Detail', 'voucher_details');\r\n                        voucher_detail.item = item.item_code;\r\n                        voucher_detail.amount = item.amount;\r\n                        voucher_detail.commision_amount = frm.doc.outstanding_amount;\r\n                    });\r\n\r\n                    frappe.set_route('Form', 'Commision Voucher', lse.name);\r\n                });\r\n            }, __(\"Requistions\"));\r\n        }\r\n    }\r\n});\r\n\r\n\r\n// Function to convert number to words\r\nfunction numberToWords(num) {\r\n    const ones = [\r\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\r\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\",\r\n        \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n    ];\r\n    const tens = [\r\n        \"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\r\n    ];\r\n    const thousands = [\r\n        \"\", \"Thousand\", \"Million\", \"Billion\"\r\n    ];\r\n\r\n    if (num === 0) return \"Zero\";\r\n\r\n    let word = \"\";\r\n    let i = 0;\r\n\r\n    while (num > 0) {\r\n        const chunk = num % 1000;\r\n        if (chunk > 0) {\r\n            const chunkWord = convertChunk(chunk);\r\n            word = chunkWord + (thousands[i] ? \" \" + thousands[i] : \"\") + \" \" + word;\r\n        }\r\n        num = Math.floor(num / 1000);\r\n        i++;\r\n    }\r\n\r\n    return word.trim();\r\n\r\n    function convertChunk(num) {\r\n        let chunkWord = \"\";\r\n\r\n        if (num > 99) {\r\n            chunkWord += ones[Math.floor(num / 100)] + \" Hundred \";\r\n            num %= 100;\r\n        }\r\n        if (num > 19) {\r\n            chunkWord += tens[Math.floor(num / 10)] + \" \";\r\n            num %= 10;\r\n        }\r\n        if (num > 0) {\r\n            chunkWord += ones[num] + \" \";\r\n        }\r\n\r\n        return chunkWord.trim();\r\n    }\r\n}\r\n\r\n// Function to format amount as currency\r\nfunction formatAmount(amount) {\r\n    const formattedAmount = \"\u20a6\" + amount.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    const amountInWords = numberToWords(Math.floor(amount));\r\n    return `${amountInWords} Naira Only`;\r\n}\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leasing",
  "enabled": 0,
  "modified": "2024-03-14 18:37:59.915628",
  "module": "Metro Custom App",
  "name": "LSE2",
  "script": "frappe.ui.form.on('Leasing', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1 && !frm.doc.__is_payment_created) {\r\n            frm.add_custom_button(__('pay'), function() {\r\n                frappe.call({\r\n                    method: 'metro_custom_app.custom_api.pay.make_payment_for_invoice',\r\n                    args: {\r\n                        invoice_id: frm.doc.invoice,\r\n                        amount: frm.doc.amount_approved,\r\n                        name: frm.doc.name,\r\n                    },\r\n                    callback: function(response) {\r\n                        console.log(frm.doc.name);\r\n                        if (response.message) {\r\n                            var pe_id = response.message;\r\n                            frm.doc.__is_payment_created = true; // Set flag to indicate payment created\r\n                            \r\n                            // Create Payment Entry with custom_requisition_id set to Leasing document name\r\n                            frappe.model.with_doctype('Payment Entry', function() {\r\n                                var pe = frappe.model.get_new_doc('Payment Entry');\r\n                                pe.custom_requisition_id = frm.doc.name;\r\n                                frappe.set_route('Form', 'Payment Entry', pe_id); // Open Payment Entry form\r\n                            });\r\n                        } else {\r\n                            frappe.msgprint('Failed to create Payment Entry');\r\n                        }\r\n                    }\r\n                });\r\n            }, __(\"Create Payment\"));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leasing",
  "enabled": 1,
  "modified": "2024-03-26 10:11:33.156819",
  "module": "Metro Custom App",
  "name": "LSE3",
  "script": "frappe.ui.form.on('Leasing', {\r\n    onload: function(frm) {\r\n        if (frm.doc.docstatus === 1 && frm.custom_buttons && frm.custom_buttons['Get Invoice']) {\r\n            frm.custom_buttons['Get Invoice'].hide();\r\n        }\r\n    },\r\n    refresh: function(frm) {\r\n        if (!frm.is_new()) {\r\n            if (frm.doc.docstatus === 1 && frm.custom_buttons && frm.custom_buttons['Get Invoice']) {\r\n                frm.custom_buttons['Get Invoice'].hide();\r\n            } else {\r\n                frm.add_custom_button(__('Get Invoice'), function() {\r\n                    insertItemsFromPurchaseInvoice(frm);\r\n                });\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Leasing', {\r\n    after_submit: function(frm) {\r\n        if (frm.doc.docstatus === 1 && frm.custom_buttons && frm.custom_buttons['Get Invoice']) {\r\n            frm.custom_buttons['Get Invoice'].hide();\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-02-20 07:03:25.738228",
  "module": "Metro Custom App",
  "name": "Entry",
  "script": "frappe.ui.form.on(\"Payment Entry\", {\r\n    base_paid_amount: function(frm) {\r\n        var promises = [];\r\n\r\n        // Fetch the first row from the references table\r\n        var row = frm.doc.references[0];\r\n        if (row && row.reference_name && row.reference_doctype === \"Sales Order\") {\r\n            // Fetch the referenced document\r\n            var promise = frappe.db.get_doc(row.reference_doctype, row.reference_name).then(function(doc) {\r\n                // Access the advance_paid field of the referenced document\r\n                var advance_paid = doc.advance_paid || 0;\r\n                var grand_total = doc.grand_total || 0;\r\n\r\n                // Calculate balance for this row\r\n                \r\n                var paid_till = advance_paid + frm.doc.base_paid_amount;\r\n                var balance = grand_total - paid_till;\r\n\r\n                // Set the values directly on the form row\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_advance_paid\", advance_paid);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_balance\", balance);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_amount_paid_till_date\", paid_till);\r\n            });\r\n            promises.push(promise);\r\n        }\r\n\r\n        // Wait for all promises to resolve\r\n        Promise.all(promises).then(function() {\r\n            // Set the custom_balance field in the form with the total balance\r\n            var total_balance = frm.doc.references[0].custom_balance || 0;\r\n            var total_till_paid = frm.doc.references[0].custom_amount_paid_till_date || 0;\r\n            frm.set_value(\"custom_balance\", total_balance);\r\n            frm.set_value(\"custom_amount_paid_till_date\", total_till_paid);\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lease",
  "enabled": 1,
  "modified": "2024-02-22 18:40:16.427005",
  "module": "Metro Custom App",
  "name": "Lizzy",
  "script": "frappe.ui.form.on('Lease', {\r\n    charge_type: function (frm) {\r\n        if (frm.doc.charge_type) {\r\n            frappe.call({\r\n                method: 'metro_custom_app.api.populate_other_charges_lease',\r\n                args: { doc: frm.doc },  // Ensure frm.doc is passed correctly\r\n                callback: function (response) {\r\n                    console.log(response)\r\n                    if (!response.exc) {\r\n                        frm.clear_table('other_charges_lease');\r\n                        response.message.forEach(function (item) {\r\n                            var row = frappe.model.add_child(frm.doc, 'Other Charges Lease', 'other_charges_lease');\r\n                            frm.doc.lease_item.forEach(function(lease_item){\r\n                                var row_amount = lease_item.amount * (item.tax_rate / 100);\r\n                                row.item = item.tax_type;\r\n                                row.percentage = item.tax_rate;\r\n                                row.amount = row_amount;\r\n                            });\r\n                        });\r\n                        frm.refresh_field('other_charges_lease');\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lease",
  "enabled": 1,
  "modified": "2024-03-02 14:01:32.576950",
  "module": "Metro Custom App",
  "name": "lizy-2",
  "script": "frappe.ui.form.on('Lease', {\r\n    refresh: function(frm) {\r\n                // Add a custom button to make Invoice Schedule if user has Linv Schedule role\r\n        if (frappe.user.has_role('Linv Schedule')) {\r\n            frm.add_custom_button(__('Make Invoice Schedule'), function() {\r\n                frappe.call({\r\n                    method: 'metro_custom_app.api.populate_lease_invoice_schedule',\r\n                    args: { lease_name: frm.doc.name },\r\n                    callback: function(response) {\r\n                        if (!response.exc) {\r\n                            frm.reload_doc();\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        // Add a custom button to create Sales Invoice\r\n        frm.add_custom_button(__('Create Sales Invoice'), function() {\r\n            frappe.call({\r\n                method: 'metro_custom_app.custom_api.lease.create_sales_invoice_from_lease',\r\n                args: { lease_name: frm.doc.name },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frm.reload_doc();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n\r\n    },\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-03-04 19:02:51.035733",
  "module": "Metro Custom App",
  "name": "Entry SNIV",
  "script": "frappe.ui.form.on(\"Payment Entry\", {\r\n    base_paid_amount: function(frm) {\r\n        var promises = [];\r\n\r\n        // Fetch the first row from the references table\r\n        var row = frm.doc.references[0];\r\n        if (row && row.reference_name && row.reference_doctype === \"Sales Invoice\") {\r\n            // Fetch the referenced document\r\n            var promise = frappe.db.get_doc(row.reference_doctype, row.reference_name).then(function(doc) {\r\n                // Access the advance_paid field of the referenced document\r\n                var advance_paid = doc.advance_paid || 0;\r\n                var grand_total = doc.grand_total || 0;\r\n                var outstanding_amount = doc.outstanding_amount || 0;\r\n          \r\n                // Calculate balance for this row\r\n                \r\n                // var paid_till = advance_paid + frm.doc.base_paid_amount;\r\n                // var balance = grand_total - paid_till;\r\n                 var balance = outstanding_amount - frm.doc.base_paid_amount\r\n                 var paid_till = grand_total - balance;\r\n              \r\n\r\n                // Set the values directly on the form row\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_advance_paid\", advance_paid);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_balance\", balance);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_amount_paid_till_date\", paid_till);\r\n            });\r\n            promises.push(promise);\r\n        }\r\n\r\n        // Wait for all promises to resolve\r\n        Promise.all(promises).then(function() {\r\n            // Set the custom_balance field in the form with the total balance\r\n            var total_balance = frm.doc.references[0].custom_balance || 0;\r\n            var total_till_paid = frm.doc.references[0].custom_amount_paid_till_date || 0;\r\n            frm.set_value(\"custom_balance\", total_balance);\r\n            frm.set_value(\"custom_amount_paid_till_date\", total_till_paid);\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Commision Voucher",
  "enabled": 1,
  "modified": "2024-03-19 14:39:09.904455",
  "module": "Metro Custom App",
  "name": "Voucher",
  "script": "frappe.ui.form.on('Commision Voucher', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1 && !frm.doc.__is_payment_created) {\r\n            frm.add_custom_button(__('pay'), function() {\r\n                frappe.call({\r\n                    method: 'metro_custom_app.custom_api.pay.make_payment_for_invoice',\r\n                    args: {\r\n                        invoice_id: frm.doc.invoice,\r\n                        amount: frm.doc.amount_approved,\r\n                        name: frm.doc.name,\r\n                    },\r\n                    callback: function(response) {\r\n                        console.log(frm.doc.name);\r\n                        if (response.message) {\r\n                            var pe_id = response.message;\r\n                            frm.doc.__is_payment_created = true; // Set flag to indicate payment created\r\n                            \r\n                            // Create Payment Entry with custom_requisition_id set to Leasing document name\r\n                            frappe.model.with_doctype('Payment Entry', function() {\r\n                                var pe = frappe.model.get_new_doc('Payment Entry');\r\n                                pe.custom_requisition_id = frm.doc.name;\r\n                                frappe.set_route('Form', 'Payment Entry', pe_id); // Open Payment Entry form\r\n                            });\r\n                        } else {\r\n                            frappe.msgprint('Failed to create Payment Entry');\r\n                        }\r\n                    }\r\n                });\r\n            }, __(\"Create Payment\"));\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Commision Voucher",
  "enabled": 1,
  "modified": "2024-03-26 10:00:58.416675",
  "module": "Metro Custom App",
  "name": "Voucher Get",
  "script": "frappe.ui.form.on('Commision Voucher', {\r\n    refresh: function(frm) {\r\n        if (frm.is_new()) {\r\n            frm.add_custom_button(__('Get Invoice'), function() {\r\n                insertItemsFromPurchaseInvoice(frm);\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nfunction insertItemsFromPurchaseInvoice(frm) {\r\n    if (!frm.doc.invoice) {\r\n        frappe.msgprint('Please select an invoice first');\r\n        return;\r\n    }\r\n\r\n    frappe.db.get_doc('Purchase Invoice', frm.doc.invoice)\r\n        .then(function(invoice) {\r\n            frm.set_value('court', invoice.custom_court);\r\n            frm.set_value('account_name', invoice.custom_beneficiary_account_name);\r\n            frm.set_value('invoice', invoice.name);\r\n            frm.set_value('client', invoice.supplier);\r\n            frm.set_value('account_number', invoice.custom_landlord_account_number);\r\n            frm.set_value('bank', invoice.custom_landlord_bank_name);\r\n            frm.set_value('beneficiary', invoice.custom_customer_name);\r\n\r\n            if (invoice.items && invoice.items.length > 0) {\r\n                invoice.items.forEach(function(item) {\r\n                    var voucher_detail = frappe.model.add_child(frm.doc, 'Voucher Detail', 'voucher_details');\r\n                    voucher_detail.item = item.item_code;\r\n                    voucher_detail.amount = item.amount;\r\n                    voucher_detail.commision_amount = frm.doc.total;\r\n                });\r\n                \r\n                frm.refresh_field('voucher_details'); // Refresh the child table\r\n            }\r\n\r\n            // // Convert outstanding_amount to words\r\n            // var amountInWords = convertAmountToWords(invoice.outstanding_amount);\r\n            // frm.set_value('amount_in_word', amountInWords);\r\n        })\r\n        .catch(function(err) {\r\n            frappe.msgprint('Error: ' + err);\r\n        });\r\n}\r\n\r\n\r\nfunction convertAmountToWords(amount) {\r\n    var words = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\r\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n    ];\r\n\r\n    var tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"];\r\n\r\n    var scales = [\"\", \"Thousand\", \"Million\", \"Billion\", \"Trillion\"];\r\n\r\n    function convertGroup(number, scale) {\r\n        var result = \"\";\r\n\r\n        if (number > 99) {\r\n            result += words[Math.floor(number / 100)] + \" Hundred \";\r\n            number %= 100;\r\n        }\r\n\r\n        if (number > 19) {\r\n            result += tens[Math.floor(number / 10)] + \" \";\r\n            number %= 10;\r\n        }\r\n\r\n        if (number > 0) {\r\n            result += words[number] + \" \";\r\n        }\r\n\r\n        if (scale > 0) {\r\n            result += scales[scale] + \" \";\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    if (amount === 0) {\r\n        return \"Zero\";\r\n    }\r\n\r\n    var numArray = amount.toString().split('.');\r\n    var wholeNumber = numArray[0];\r\n    var decimalNumber = numArray.length > 1 ? numArray[1] : \"00\";\r\n\r\n    var result = \"\";\r\n\r\n    if (wholeNumber.length > 15) {\r\n        return \"Number too large\";\r\n    }\r\n\r\n    var groups = [];\r\n    while (wholeNumber.length > 0) {\r\n        groups.unshift(wholeNumber.slice(-3));\r\n        wholeNumber = wholeNumber.slice(0, -3);\r\n    }\r\n\r\n    for (var i = 0; i < groups.length; i++) {\r\n        if (groups[i] !== \"000\") {\r\n            result += convertGroup(parseInt(groups[i], 10), groups.length - i - 1);\r\n        }\r\n    }\r\n\r\n    result += \"Naira \";\r\n\r\n    if (decimalNumber !== \"00\") {\r\n        result += \"and \" + tens[parseInt(decimalNumber[0])] + \" \" + words[parseInt(decimalNumber[1])] + \" Kobo\";\r\n    }\r\n\r\n    return result.trim();\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-05-11 13:53:35.091468",
  "module": "Metro Custom App",
  "name": "Fetc margins",
  "script": "frappe.ui.form.on('Purchase Order Item', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var child = locals[cdt][cdn];\r\n        if (child.item_code) {\r\n            // Fetch the custom_profit_margin and custom_sales_price for the selected item_code\r\n            frappe.call({\r\n                method: 'metro_custom_app.custom_api.update_margin_percent.get_custom_profit_margin',\r\n                args: {\r\n                    item_code: child.item_code\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message) {\r\n                        var [custom_profit_margin, custom_sales_price] = r.message;\r\n                        frappe.model.set_value(cdt, cdn, 'custom_profit_margin', custom_profit_margin);\r\n                        frappe.model.set_value(cdt, cdn, 'custom_sales_price', custom_sales_price);\r\n                        frm.refresh_field('custom_profit_margin');\r\n                        frm.refresh_field('custom_sales_price');\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-05-15 15:14:38.488285",
  "module": "Metro Custom App",
  "name": "Expense Account",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    refresh: function(frm) {\r\n        var company = frm.doc.company;\r\n\r\n        frappe.call({\r\n            method: 'frappe.client.get_list',\r\n            args: {\r\n                doctype: 'Account',\r\n                filters: { company: company, account_name: ['like', \"Stock Received But Not Billed\"] },\r\n                limit: 1\r\n            },\r\n            callback: function(response) {\r\n                if (response.message && response.message.length > 0) {\r\n                    frm.set_query('custom_expense_account', function() {\r\n                        return {\r\n                            filters: {\r\n                                company: company,\r\n                                account_name: ['like', \"Stock Received But Not Billed\"]\r\n                            }\r\n                        };\r\n                    });\r\n                    var firstAccount = response.message[0];\r\n                    frm.set_value('custom_expense_account', firstAccount.name);\r\n                    frm.refresh_field('custom_expense_account');\r\n\r\n                    // Set expense_account in child table\r\n                    frm.doc.items.forEach(function(item) {\r\n                        frappe.model.set_value(item.doctype, item.name, 'expense_account', firstAccount.name);\r\n                    });\r\n                    frm.refresh_field('items');\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-05-15 15:10:57.327067",
  "module": "Metro Custom App",
  "name": "Xpense Account",
  "script": "frappe.ui.form.on('Purchase Order Item', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        var child_doc = locals[cdt][cdn];\r\n        frappe.model.set_value(child_doc.doctype, child_doc.name, 'expense_account', frm.doc.custom_expense_account);\r\n        \r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Request",
  "enabled": 1,
  "modified": "2024-05-30 22:36:04.648919",
  "module": "Metro Custom App",
  "name": "Fetch Fields",
  "script": "frappe.ui.form.on('Payment Request', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.reference_doctype === 'Purchase Order' && frm.doc.reference_name && !frm.doc.__islocal) {\r\n            frappe.call({\r\n                method: 'frappe.client.get',\r\n                args: {\r\n                    doctype: 'Purchase Order',\r\n                    name: frm.doc.reference_name\r\n                },\r\n                callback: function(r) {\r\n                    if (r.message.custom_items_description_summary && r.message.custom_items_description_summary !== \"null\") {\r\n                        frm.set_value('custom_description', r.message.custom_items_description_summary);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-06-13 21:19:51.320660",
  "module": "Metro Custom App",
  "name": "readonly",
  "script": "frappe.ui.form.on('Purchase Order', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'User',\r\n                name: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if(r.message) {\r\n                    var user_roles = r.message.roles.map(role => role.role);\r\n                    if(!user_roles.includes('Profit Margin Role')) {\r\n                        frm.fields_dict.items.grid.update_docfield_property('custom_profit_margin', 'read_only', 1);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    },\r\n    refresh: function(frm) {\r\n        frappe.call({\r\n            method: 'frappe.client.get',\r\n            args: {\r\n                doctype: 'User',\r\n                name: frappe.session.user\r\n            },\r\n            callback: function(r) {\r\n                if(r.message) {\r\n                    var user_roles = r.message.roles.map(role => role.role);\r\n                    if(!user_roles.includes('Profit Margin Role')) {\r\n                        frm.fields_dict.items.grid.update_docfield_property('custom_profit_margin', 'read_only', 1);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-09-27 10:57:37.953760",
  "module": "Metro Custom App",
  "name": "Sales oder Requ",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        if (frm.doc.grand_total > 0) {\n             frm.add_custom_button(__('Create Lease Requisition'), function() {\n                   frappe.model.with_doctype('Leasing', function() {\n                    var lse = frappe.model.get_new_doc('Leasing');\n                    lse.court_name = frm.doc.custom_court; // Set Procedure Template to the new_item_code\n                    lse.account_name = frm.doc.custom_beneficiary_account_name;\n                    lse.invoice = frm.doc.name;\n                    lse.customer = frm.doc.customer;\n                    lse.account_number = frm.doc.custom_landlord_account_number;\n                    lse.bank = frm.doc.custom_landlord_bank_name;\n                    lse.tenant_name = frm.doc.custom_customer_name;\n                    lse.amount_figures = frm.doc.grand_total;\n                    lse.amount_in_word = frm.doc.base_in_words;\n\n                    frappe.set_route('Form', 'Leasing', lse.name);\n                });\n        }, __(\"Requistions\"));\n        \n       \n        \n       frm.add_custom_button(__('Create Commision Voucher'), function() {\n        \n                frappe.model.with_doctype('Commision Voucher', function() {\n                    var lse = frappe.model.get_new_doc('Commision Voucher');\n                    lse.court = frm.doc.custom_court; // Set Procedure Template to the new_item_code  \n                    lse.account_name = frm.doc.custom_beneficiary_account_name;\n                    lse.sales_order_no = frm.doc.name;\n                    lse.client = frm.doc.sales_partner;\n                     lse.commision_due = frm.doc.commission_rate;\n                    lse.account_number = frm.doc.custom_landlord_account_number;\n                    lse.bank = frm.doc.custom_landlord_bank_name;\n                    lse.beneficiary = frm.doc.sales_partner;\n                    lse.grand_total = frm.doc.custom_invoice_grand_total;\n                    lse.tax = frm.doc.taxes_and_charges_added ;\n                        // Copy items from Purchase Invoice to Commission Voucher\n                    frm.doc.items.forEach(function(item) {\n                        var voucher_detail = frappe.model.add_child(lse, 'Voucher Detail', 'voucher_details');\n                        voucher_detail.item = item.item_code;\n                        voucher_detail.amount = item.amount;\n                        voucher_detail.commision_amount = frm.doc.total_commission;\n                    });\n\n                    frappe.set_route('Form', 'Commision Voucher', lse.name);\n                });\n        \n        \n        \n        \n        \n        \n        \n        \n            // Your existing code for the button action\n        }, __(\"Requistions\"));\n\n        } \n        \n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Leasing",
  "enabled": 1,
  "modified": "2024-09-27 13:03:25.080689",
  "module": "Metro Custom App",
  "name": "Leasing In WORDS",
  "script": "frappe.ui.form.on('Leasing', {\r\n    refresh(frm) {\r\n         // Only update the amount_in_words if it's not already set\r\n        const amount = frm.doc.amount_figures; // Get the amount from the form\r\n        if (amount && !frm.doc.amount_in_word) { // Check if 'amount_in_words' is empty\r\n            frm.set_value('amount_in_word', formatAmount(amount));\r\n        }\r\n    }\r\n});\r\n\r\n// Function to convert number to words\r\nfunction numberToWords(num) {\r\n    const ones = [\r\n        \"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\",\r\n        \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\",\r\n        \"Seventeen\", \"Eighteen\", \"Nineteen\"\r\n    ];\r\n    const tens = [\r\n        \"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"\r\n    ];\r\n    const thousands = [\r\n        \"\", \"Thousand\", \"Million\", \"Billion\"\r\n    ];\r\n\r\n    if (num === 0) return \"Zero\";\r\n\r\n    let word = \"\";\r\n    let i = 0;\r\n\r\n    while (num > 0) {\r\n        const chunk = num % 1000;\r\n        if (chunk > 0) {\r\n            const chunkWord = convertChunk(chunk);\r\n            word = chunkWord + (thousands[i] ? \" \" + thousands[i] : \"\") + \" \" + word;\r\n        }\r\n        num = Math.floor(num / 1000);\r\n        i++;\r\n    }\r\n\r\n    return word.trim();\r\n\r\n    function convertChunk(num) {\r\n        let chunkWord = \"\";\r\n\r\n        if (num > 99) {\r\n            chunkWord += ones[Math.floor(num / 100)] + \" Hundred \";\r\n            num %= 100;\r\n        }\r\n        if (num > 19) {\r\n            chunkWord += tens[Math.floor(num / 10)] + \" \";\r\n            num %= 10;\r\n        }\r\n        if (num > 0) {\r\n            chunkWord += ones[num] + \" \";\r\n        }\r\n\r\n        return chunkWord.trim();\r\n    }\r\n}\r\n\r\n// Function to format amount as currency\r\nfunction formatAmount(amount) {\r\n    const formattedAmount = \"\u20a6\" + amount.toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    const amountInWords = numberToWords(Math.floor(amount));\r\n    return `${formattedAmount} (${amountInWords} Naira Only)`;\r\n}\r\n",
  "view": "Form"
 }
]