[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Material Request",
  "enabled": 1,
  "modified": "2024-02-13 09:44:25.884637",
  "module": "Project BOQ and POW",
  "name": "Material Request-Form",
  "script": "frappe.ui.form.on('Material Request', {\n\trefresh(frm) {\n\t\t// your code here\n        frm.events.make_custom_button(frm);\n\t},\n\tvalidate(frm){\n        //Check Stock before Save\n        check_boq_quantity_status(frm);\n\t},\n    on_submit: function(frm) {\t\n        update_boq_quantity(frm);\n\t},\n    material_request_type: function(frm) {\n        frm.events.make_custom_button(frm);\n    },\n    custom_bill_of_quantity: function(frm){\n        var boq = frm.doc.custom_bill_of_quantity;\n\n        console.log('Custom BOQ...'+boq)\n\n        if (boq) {\n        frappe.call({\n            method: \"wa_project.services.rest.get_boq_item\",\n            args: { mt_boq: boq },\n            })\n            .done((r) => {\n            frm.doc.items = [];\n\n            $.each(r.message, function (_i, e) {\n                let item = frm.add_child(\"items\");\n                item.item_code = e.item_code;\n                item.item_name = e.item_name,\n                item.rate = e.rate;\n                item.uom = e.uom,       \n                item.stock_uom = e.stock_uom,          \n                item.description = e.description,\n                item.qty = e.quantity;\n                item.boq_no = frm.doc.custom_bill_of_quantity;\n                item.custom_boq_qty = e.actual_qty;\n                item.custom_subtask = e.subtask\n            });\n            refresh_field(\"items\");\n            })\n            .fail((f) => {\n            console.log(f);\n            });\n        }\n\n\t},\n    custom_subtask: function(frm){\n        let sub_task = frm.doc.custom_subtask;\n        let boq = frm.doc.custom_bill_of_quantity;\n\n        console.log('Doing Subtask Items...')\n\n        if (sub_task) {\n            get_subtask_item(frm, sub_task, boq)\n        }\n        else {\n            get_boq_items(frm);\n        }\n    },    \n\n    make_custom_button: function(frm) {\n        var request_type = frm.doc.material_request_type;\n        if (frm.doc.docstatus==0) {\n            if (request_type == \"Material Transfer\" || request_type == \"Material Issue\" || request_type == \"Purchase\") {\n\t\t\tfrm.add_custom_button(__(\"Bill of Quantity\"),\n\t\t\t\t() => frm.events.get_items_from_boq(frm)\n                );\n            }\n            else{\n                setTimeout(() => {\n                    frm.remove_custom_button(\"Bill Of Quantity\")\n                }, 100);\n            }\n\t\t}\n\t},\n    get_items_from_boq: function(frm) {\n\t\tvar d = new frappe.ui.Dialog({\n\t\t\ttitle: __(\"Get Bill of Quantity Items\"),\n\t\t\tfields: [\n\t\t\t\t{\"fieldname\":\"boq\", \"fieldtype\":\"Link\", \"label\":__(\"Bill of Quantity\"),\n\t\t\t\t\toptions:\"Bill of Quantity\", reqd: 1, get_query: function() {\n\t\t\t\t\t\treturn {filters: { docstatus:1 }};\n\t\t\t\t\t}},\n\t\t\t\t{\"fieldname\":\"warehouse\", \"fieldtype\":\"Link\", \"label\":__(\"For Warehouse\"),\n\t\t\t\t\toptions:\"Warehouse\", reqd: 1}\n\t\t\t],\n\t\t\tprimary_action_label: 'Get Items',\n\t\t\tprimary_action(values) {\n\n\t\t\t\tif(!values) return;\n\t\t\t\tvalues[\"company\"] = frm.doc.company;\n\t\t\t\tif(!frm.doc.company) frappe.throw(__(\"Company field is required\"));\n\n                if(values[\"boq\"]){\n                    frm.set_value(\"custom_bill_of_quantity\", values[\"boq\"]);\n                    d.hide();\n                    refresh_field(\"items\");\n                }\n\t\t\t}\n\t\t});\n\n\t\td.show();\n\t},\n\n    before_workflow_action: (frm) => {\n        if (\n            frm.doc.workflow_state === \"Awaiting Managing Director's Approval\" && \n            frm.selected_workflow_action === \"Approve\" &&\n            frm.doc.docstatus == 0\n        ) {\n            frappe.msgprint({\n                title: __('Approved - Material Request'),\n                indicator: 'green',\n                message: __('Update material request BOQ')\n            });\n            update_boq_quantity(frm);\n            // frappe.validated = false;\n        }\n    },\n\n});\n\nfrappe.ui.form.on('Material Request Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n    item_code : function(frm, cdt, cdn){\n        let row = locals[cdt][cdn];     \n         let item_code = row.item_code;   \n         let warehouse = row.warehouse;   \n    },\n    qty : function(frm, cdt, cdn){\n\n        console.log('Field qty...')\n\n        var child = locals[cdt][cdn];\n        let item_code = child.item_code;  \n        let boqno = child.boq_no;  \n        var item_qty = child.qty;\n        var boq_item = false;\n\n        console.log('Field qty boqno...'+boqno)\n\n        if (boqno){\n            boq_item = true;\n            if (child.doctype == 'Material Request Item') {                \n                frappe.call({\n                    method: \"wa_project.services.rest.check_boq_quantity\",\n                    args: { \n                        \"item_code\": item_code,\n                        \"boq\": boqno        \n                    },\n                  })\n                  .done((r) => {\n                    let message = r.message;\n                    var boq_qty = message.actual_qty;\n                   \n                    if (item_qty > boq_qty) {    \n                        frappe.msgprint({\n                            title: __('Warning - Quantity Not Approved/Available'),\n                            indicator: 'red',\n                            message: __('Requested Quantity Exceeds Bill of Quantity')\n                        });\n        \n                        frappe.validated = false;\n                    }      \n                    else {\n                        var boq_bal = boq_qty - item_qty;\n                    }\n            \n                });\n            }  \n        }\t\n        else{\n            // Check Stock Quantities\n            check_item_quantity(frm)\n        }     \n        \n    }\n})\n\n\n// let check_item_quantity = function(frm, item_code, bom) {\n    let check_item_quantity = function(frm) {\n\n        cur_frm.doc.items.forEach(item => {\n            const rowno = item.idx;\n            var stock_qty = item.actual_qty;\n            var required_qty = item.qty;\n            var warehouse = item.warehouse;\n            let itemcode = item.item_code;   \n\n            if (parseInt(stock_qty) <  parseInt(required_qty) ) {\n                // frappe.msgprint(\"Required Quantity Not Available\");\n                frappe.msgprint({\n                    title: __('Warning - Insufficient Stock'),\n                    indicator: 'red',\n                    message: __('Required Item Quantity Not Available')\n                });\n\n                frappe.validated = false;\n            }        \n        })\n    }\n\n    var check_boq_quantity_status = function(frm) {\n        var boq = frm.doc.custom_bill_of_quantity;\n    \n        cur_frm.doc.items.forEach(item => {\n            const rowno = item.idx;\n            var stock_qty = item.actual_qty;\n            var warehouse = item.warehouse;\n            var itemcode = item.item_code;   \n            var boq_qty = item.custom_boq_qty;\n            var item_qty = item.qty;\n            var boq = item.boq_no;\n            var item_bal = 0;\n\n            if (parseInt(boq_qty) <  parseInt(item_qty) ) {\n                frappe.msgprint({\n                    title: __('Warning - Insufficient Stock'),\n                    indicator: 'red',\n                    message: __(itemcode+' - Requested Quantity Not Available in BOQ')\n                });\n    \n                frappe.validated = false;\n            }     \n           \n        })\n    }\n\n    var update_boq_quantity = function(frm) {\n\n        let boqs = frm.doc.custom_bill_of_quantity;\n\n        console.log('Update boq..'+boqs)\n\n        cur_frm.doc.items.forEach(item => {\n            const rowno = item.idx;\n            var stock_qty = item.actual_qty;\n            var warehouse = item.warehouse;\n            var itemcode = item.item_code;   \n            var boq_qty = item.custom_boq_qty;\n            var item_qty = item.qty;\n            var boq = boqs;\n            var item_bal = 0;\n            let sub_task = item.custom_subtask;\n\n            if (parseInt(boq_qty) <  parseInt(item_qty) ) {\n                // frappe.msgprint(\"Required Quantity Not Available\");\n                frappe.msgprint({\n                    title: __('Warning - Insufficient Stock'),\n                    indicator: 'red',\n                    message: __('Required Item Quantity Not Available')\n                });\n    \n                frappe.validated = false;\n            }     \n            else {\n                item_bal = boq_qty - item_qty;\n                \n                frappe.call({\n                    method: \"wa_project.services.rest.update_boq_item\",\n                    args: { \n                        \"itemcode\": itemcode,\n                        \"boq\": boq,    \n                        \"item_qty\": item_bal,\n                        \"subtask\": sub_task\n                    },\n                })\n            }   \n        })\n    }\n\n\n    frappe.ui.form.on('Material Request Item', {\n        item_code: function(frm,dt,dn){\n            let row = frappe.get_doc(dt, dn);\n        }\n    });\n\n    function set_subtask_filter(frm, sub_task) {     \n        let table = frm.doc.items;\n        for (var i = 0; i < table.length; i++) {\n            let is_complete = table[i].subtask;\n            if (is_complete === sub_task) {\n                $(\"[data-name='\" + table[i].name + \"']\").show();\n            } else {\n                $(\"[data-name='\" + table[i].name + \"']\").hide();\n            }\n        }            \n    }\n\n    function get_boq_items(frm) {\n        var boq = frm.doc.custom_bill_of_quantity;\n\n        console.log('BOQ...'+boq)\n\n        if (boq) {\n        frappe.call({\n            method: \"wa_project.services.rest.get_boq_item\",\n            args: { mt_boq: boq },\n            })\n            .done((r) => {\n            frm.doc.items = [];\n\n            $.each(r.message, function (_i, e) {\n                let item = frm.add_child(\"items\");\n                item.item_code = e.item_code;\n                item.item_name = e.item_name,\n                item.rate = e.rate;\n                item.uom = e.uom,       \n                item.stock_uom = e.stock_uom,          \n                item.description = e.description,\n                item.qty = e.quantity;\n                item.boq_no = frm.doc.custom_bill_of_quantity;\n                item.custom_boq_qty = e.actual_qty;\n                item.custom_subtask = e.subtask\n            });\n            refresh_field(\"items\");\n            })\n            .fail((f) => {\n            console.log(f);\n            });\n        }\n    }\n\n    function get_subtask_item(frm, sub_task, boq) {   \n        if (boq) {\n        frappe.call({\n            method: \"wa_project.services.rest.get_subtask_item\",\n            args: { boq: boq,\n                    subtask: sub_task \n                 },\n            })\n            .done((r) => {\n            frm.doc.items = [];\n\n            $.each(r.message, function (_i, e) {\n                let item = frm.add_child(\"items\");\n                item.item_code = e.item_code;\n                item.item_name = e.item_name,\n                item.rate = e.rate;\n                item.uom = e.uom,       \n                item.stock_uom = e.stock_uom,          \n                item.description = e.description,\n                item.qty = e.quantity;\n                item.boq_no = frm.doc.custom_bill_of_quantity;\n                item.custom_boq_qty = e.actual_qty;\n                item.custom_subtask = e.subtask\n            });\n            refresh_field(\"items\");\n            })\n            .fail((f) => {\n            console.log(f);\n            });\n        }    \n        \n    }",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-02-13 06:43:55.044644",
  "module": "Project BOQ and POW",
  "name": "Purchase Order-Form",
  "script": "\nfrappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n        // console.log('Purchase Order refreshing....')\n\t},\n    \n\tsupplier: function(frm){\n\n        var supplier_name = frm.doc.supplier;\n\n        console.log('Goods for supplier: '+supplier_name)\n\n        if (supplier_name) {\n        frappe.call({\n            method: \"wa_project.services.api.supplier_goods\",\n            args: { supplier: frm.doc.supplier },\n            })\n            .done((r) => {\n            frm.doc.items = [];\n\n            $.each(r.message, function (_i, e) {\n                let goods = frm.add_child(\"items\");\n                goods.item_code = e.item;\n                goods.rate = e.rate;\n                goods.uom = e.uom,\n                goods.item_name = e.item_name,\n                goods.description = e.description,\n                goods.qty = 1;\n            });\n            refresh_field(\"items\");\n            })\n            .fail((f) => {\n            console.log(f);\n            });\n        }\n\n\t},\n    items_add : function(frm) {\n        console.log('A row has been added to items table');\n    }\n    \n});\n\n\nfrappe.ui.form.on('Purchase Order Item', {   \n    custom_profit_margin(frm, cdt, cdn) {\n        // var totalpaid = 0;\n        let row = frappe.get_doc(cdt, cdn);\n        var margin = row.custom_profit_margin;\n        let rate = cint(row.rate);\n        var item = row.item_code;\n        var item_uom = row.uom;        \n\n\t\t// let bal = cint(row.balance);\n        var sp = 0\n        \n        if (margin >= 0) {\n            var sp = ((100 + margin)/100) * rate\n            // flt(item.qty * item.conversion_factor, precision(\"stock_qty\", item));\n        }\n        \n        frappe.model.set_value(cdt, cdn, \"custom_sales_price\", flt(sp) );\n\t\trefresh_field(\"items\");    \n        \n        var sale_price = row.custom_sales_price;\n        \n        set_selling_price(frm, item, item_uom, sale_price)\n    }\n})\n\n\nvar check_po_quantity = function(frm) {\n    // console.log('Update PO Item Qty......')\n\n    cur_frm.doc.items.forEach(item => {\n        const rowno = item.idx;\n        var stock_qty = item.actual_qty;\n        var warehouse = item.warehouse;\n        var itemcode = item.item_code;   \n        var boq_qty = item.boq_qty\n        var item_qty = item.qty;\n        var boq = item.boq_no;\n        var item_bal = 0;\n\n        if (parseInt(boq_qty) <  parseInt(item_qty) ) {\n            // frappe.msgprint(\"Required Quantity Not Available\");\n            frappe.msgprint({\n                title: __('Warning - Insufficient Stock'),\n                indicator: 'red',\n                message: __('Required Item Quantity Not Available')\n            });\n\n            frappe.validated = false;\n        }     \n        else {\n            item_bal = boq_qty - item_qty;\n            \n            console.log('Update BOQ '+boq+' Item'+itemcode+' To '+item_bal)\n            frappe.call({\n                method: \"wa_project.services.rest.update_boq_item\",\n                args: { \n                    \"itemcode\": itemcode,\n                    \"boq\": boq,    \n                    \"item_qty\": item_bal\n                },\n            })\n\n        }   \n    })\n}\n\nvar set_selling_price = function(frm, item, item_uom, sell_price) {\n    frappe.call({\n        method: \"wa_project.services.rest.set_item_price\",\t\t\t\n        args: {\n            \"item\": item,\n            \"uom\": item_uom,\n            \"sell_price\": sell_price\n        }\n        // callback: function(r) {\n        //     if (r.message) {\n\n        //         console.log('PO Rate....'+r.message.rate)\n        //         frappe.model.set_value(cdt, cdn, \"rate\", r.message.rate );\n        //         refresh_field(\"items\");  \t\n        //     }\n        // }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2024-02-09 21:00:58.966606",
  "module": null,
  "name": "Sales Order",
  "script": "frappe.ui.form.on(\"Payment Schedule\", {\r\n    payment_amount: function (frm, cdt, cdn) {\r\n        var row = locals[cdt][cdn];\r\n        if(row.payment_amount){\r\n            frappe.model.set_value(cdt, cdn, 'invoice_portion', (row.payment_amount/frm.doc.grand_total)*100);\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Sales Order', {\r\n    refresh(frm) {\r\n    setTimeout(() => {\r\n        frm.remove_custom_button('Pick List', 'Create');\r\n        frm.remove_custom_button('Subscription', 'Create');\r\n        frm.remove_custom_button('Payment Request', 'Create');\r\n        frm.remove_custom_button('Project', 'Create');\r\n        frm.remove_custom_button('Request for Raw Materials', 'Create');\r\n        frm.remove_custom_button('Purchase Order', 'Create');\r\n        frm.remove_custom_button('Sales Invoice', 'Create');\r\n        frm.remove_custom_button('Material Request', 'Create');\r\n        frm.remove_custom_button('Work Order', 'Create');\r\n        }, 10);\r\n    }\r\n});\r\n\r\n\r\nfrappe.ui.form.on('Sales Order', {\r\n    refresh(frm) {\r\n    setTimeout(() => {\r\n      if (frm.doc.grand_total > frm.doc.advance_paid) \r\n        frm.remove_custom_button(\"Delivery Note\", 'Create');\r\n    }\r\n)}});\r\n\r\n\r\n\r\n\r\ncur_frm.set_query(\"sales_type\", function () {\r\n    return {\r\n        filters: {\r\n            name: [\"in\", [\"Project\", \"Property\"]]\r\n        }\r\n    };\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-02-09 16:53:13.389247",
  "module": "Project BOQ and POW",
  "name": "Purchase Inv",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tsupplier: function(frm){\n\n        var supplier_name = frm.doc.supplier;\n\n        console.log('Check Supplier good for..'+supplier_name)\n\n        if (supplier_name) {\n        frappe.call({\n            method: \"wa_project.services.api.supplier_goods\",\n            args: { supplier: frm.doc.supplier },\n            })\n            .done((r) => {\n            frm.doc.items = [];\n\n            $.each(r.message, function (_i, e) {\n                let goods = frm.add_child(\"items\");\n                goods.item_code = e.item;\n                goods.rate = e.rate;\n                goods.uom = e.uom,\n                goods.item_name = e.item_name,\n                goods.description = e.description,\n                goods.qty = 1;\n            });\n            refresh_field(\"items\");\n            })\n            .fail((f) => {\n            console.log(f);\n            });\n        }\n\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-02-20 07:03:25.738228",
  "module": "Metro Custom App",
  "name": "Entry",
  "script": "frappe.ui.form.on(\"Payment Entry\", {\r\n    base_paid_amount: function(frm) {\r\n        var promises = [];\r\n\r\n        // Fetch the first row from the references table\r\n        var row = frm.doc.references[0];\r\n        if (row && row.reference_name && row.reference_doctype === \"Sales Order\") {\r\n            // Fetch the referenced document\r\n            var promise = frappe.db.get_doc(row.reference_doctype, row.reference_name).then(function(doc) {\r\n                // Access the advance_paid field of the referenced document\r\n                var advance_paid = doc.advance_paid || 0;\r\n                var grand_total = doc.grand_total || 0;\r\n\r\n                // Calculate balance for this row\r\n                \r\n                var paid_till = advance_paid + frm.doc.base_paid_amount;\r\n                var balance = grand_total - paid_till;\r\n\r\n                // Set the values directly on the form row\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_advance_paid\", advance_paid);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_balance\", balance);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_amount_paid_till_date\", paid_till);\r\n            });\r\n            promises.push(promise);\r\n        }\r\n\r\n        // Wait for all promises to resolve\r\n        Promise.all(promises).then(function() {\r\n            // Set the custom_balance field in the form with the total balance\r\n            var total_balance = frm.doc.references[0].custom_balance || 0;\r\n            var total_till_paid = frm.doc.references[0].custom_amount_paid_till_date || 0;\r\n            frm.set_value(\"custom_balance\", total_balance);\r\n            frm.set_value(\"custom_amount_paid_till_date\", total_till_paid);\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lease",
  "enabled": 1,
  "modified": "2024-02-22 18:40:16.427005",
  "module": "Metro Custom App",
  "name": "Lizzy",
  "script": "frappe.ui.form.on('Lease', {\r\n    charge_type: function (frm) {\r\n        if (frm.doc.charge_type) {\r\n            frappe.call({\r\n                method: 'metro_custom_app.api.populate_other_charges_lease',\r\n                args: { doc: frm.doc },  // Ensure frm.doc is passed correctly\r\n                callback: function (response) {\r\n                    console.log(response)\r\n                    if (!response.exc) {\r\n                        frm.clear_table('other_charges_lease');\r\n                        response.message.forEach(function (item) {\r\n                            var row = frappe.model.add_child(frm.doc, 'Other Charges Lease', 'other_charges_lease');\r\n                            frm.doc.lease_item.forEach(function(lease_item){\r\n                                var row_amount = lease_item.amount * (item.tax_rate / 100);\r\n                                row.item = item.tax_type;\r\n                                row.percentage = item.tax_rate;\r\n                                row.amount = row_amount;\r\n                            });\r\n                        });\r\n                        frm.refresh_field('other_charges_lease');\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lease",
  "enabled": 1,
  "modified": "2024-03-02 14:01:32.576950",
  "module": "Metro Custom App",
  "name": "lizy-2",
  "script": "frappe.ui.form.on('Lease', {\r\n    refresh: function(frm) {\r\n                // Add a custom button to make Invoice Schedule if user has Linv Schedule role\r\n        if (frappe.user.has_role('Linv Schedule')) {\r\n            frm.add_custom_button(__('Make Invoice Schedule'), function() {\r\n                frappe.call({\r\n                    method: 'metro_custom_app.api.populate_lease_invoice_schedule',\r\n                    args: { lease_name: frm.doc.name },\r\n                    callback: function(response) {\r\n                        if (!response.exc) {\r\n                            frm.reload_doc();\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        // Add a custom button to create Sales Invoice\r\n        frm.add_custom_button(__('Create Sales Invoice'), function() {\r\n            frappe.call({\r\n                method: 'metro_custom_app.custom_api.lease.create_sales_invoice_from_lease',\r\n                args: { lease_name: frm.doc.name },\r\n                callback: function(response) {\r\n                    if (!response.exc) {\r\n                        frm.reload_doc();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        \r\n\r\n    },\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-03-04 19:02:51.035733",
  "module": "Metro Custom App",
  "name": "Entry SNIV",
  "script": "frappe.ui.form.on(\"Payment Entry\", {\r\n    base_paid_amount: function(frm) {\r\n        var promises = [];\r\n\r\n        // Fetch the first row from the references table\r\n        var row = frm.doc.references[0];\r\n        if (row && row.reference_name && row.reference_doctype === \"Sales Invoice\") {\r\n            // Fetch the referenced document\r\n            var promise = frappe.db.get_doc(row.reference_doctype, row.reference_name).then(function(doc) {\r\n                // Access the advance_paid field of the referenced document\r\n                var advance_paid = doc.advance_paid || 0;\r\n                var grand_total = doc.grand_total || 0;\r\n                var outstanding_amount = doc.outstanding_amount || 0;\r\n          \r\n                // Calculate balance for this row\r\n                \r\n                // var paid_till = advance_paid + frm.doc.base_paid_amount;\r\n                // var balance = grand_total - paid_till;\r\n                 var balance = outstanding_amount - frm.doc.base_paid_amount\r\n                 var paid_till = grand_total - balance;\r\n              \r\n\r\n                // Set the values directly on the form row\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_advance_paid\", advance_paid);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_balance\", balance);\r\n                frappe.model.set_value(row.doctype, row.name, \"custom_amount_paid_till_date\", paid_till);\r\n            });\r\n            promises.push(promise);\r\n        }\r\n\r\n        // Wait for all promises to resolve\r\n        Promise.all(promises).then(function() {\r\n            // Set the custom_balance field in the form with the total balance\r\n            var total_balance = frm.doc.references[0].custom_balance || 0;\r\n            var total_till_paid = frm.doc.references[0].custom_amount_paid_till_date || 0;\r\n            frm.set_value(\"custom_balance\", total_balance);\r\n            frm.set_value(\"custom_amount_paid_till_date\", total_till_paid);\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2024-02-08 06:17:23.762833",
  "module": "Project BOQ and POW",
  "name": "Supplier Goods",
  "script": "frappe.ui.form.on('Purchase Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tsupplier: function(frm){\n\n        var supplier_name = frm.doc.supplier;\n\n        console.log('Check Supplier good for..'+supplier_name)\n\n        if (supplier_name) {\n        frappe.call({\n            method: \"wa_project.services.api.supplier_goods\",\n            args: { supplier: frm.doc.supplier },\n            })\n            .done((r) => {\n            frm.doc.items = [];\n\n            $.each(r.message, function (_i, e) {\n                let goods = frm.add_child(\"items\");\n                goods.item_code = e.item;\n                goods.rate = e.rate;\n                goods.uom = e.uom,\n                goods.item_name = e.item_name,\n                goods.description = e.description,\n                goods.qty = 1;\n            });\n            refresh_field(\"items\");\n            })\n            .fail((f) => {\n            console.log(f);\n            });\n        }\n\n\t},\n    items_add : function(frm) {\n        console.log('A row has been added to items table');\n    }\n    \n});\n\n\nfrappe.ui.form.on('Purchase Order Item', {   \n    profit_margin(frm, cdt, cdn) {\n        // var totalpaid = 0;\n        let row = frappe.get_doc(cdt, cdn);\n        var margin = row.profit_margin;\n        let rate = cint(row.rate);\n        var item = row.item_code;\n        var item_uom = row.uom;\n\n\t\t// let bal = cint(row.balance);\n        var sp = 0\n        \n        if (margin >= 0) {\n            sp = ((100 + margin)/100) * rate\n            // flt(item.qty * item.conversion_factor, precision(\"stock_qty\", item));\n        }\n        \n        frappe.model.set_value(cdt, cdn, \"sales_price\", flt(sp) );\n\t\trefresh_field(\"items\");    \n        \n        var sale_price = row.sales_price;\n        \n        set_selling_price(frm, item, item_uom, sale_price)\n\n    }\n})\n\n\nvar check_po_quantity = function(frm) {\n    // console.log('Update PO Item Qty......')\n\n    cur_frm.doc.items.forEach(item => {\n        const rowno = item.idx;\n        var stock_qty = item.actual_qty;\n        var warehouse = item.warehouse;\n        var itemcode = item.item_code;   \n        var boq_qty = item.boq_qty\n        var item_qty = item.qty;\n        var boq = item.boq_no;\n        var item_bal = 0;\n\n        if (parseInt(boq_qty) <  parseInt(item_qty) ) {\n            // frappe.msgprint(\"Required Quantity Not Available\");\n            frappe.msgprint({\n                title: __('Warning - Insufficient Stock'),\n                indicator: 'red',\n                message: __('Required Item Quantity Not Available')\n            });\n\n            frappe.validated = false;\n        }     \n        else {\n            item_bal = boq_qty - item_qty;\n            \n            console.log('Update BOQ '+boq+' Item'+itemcode+' To '+item_bal)\n            frappe.call({\n                method: \"wa_project.services.rest.update_boq_item\",\n                args: { \n                    \"itemcode\": itemcode,\n                    \"boq\": boq,    \n                    \"item_qty\": item_bal\n                },\n            })\n\n        }   \n    })\n}\n\nvar set_selling_price = function(frm, item, item_uom, sell_price) {\n    frappe.call({\n        method: \"wa_project.services.rest.set_item_price\",\t\t\t\n        args: {\n            \"item\": item,\n            \"uom\": item_uom,\n            \"sell_price\": sell_price\n        }\n        // callback: function(r) {\n        //     if (r.message) {\n\n        //         console.log('PO Rate....'+r.message.rate)\n        //         frappe.model.set_value(cdt, cdn, \"rate\", r.message.rate );\n        //         refresh_field(\"items\");  \t\n        //     }\n        // }\n    });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2024-02-12 10:00:50.675722",
  "module": "Project BOQ and POW",
  "name": "Payment schedule",
  "script": "frappe.ui.form.on(\"Payment Schedule\", {\n    payment_amount: function (frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        if(row.payment_amount){\n            frappe.model.set_value(cdt, cdn, 'invoice_portion', (row.payment_amount/frm.doc.grand_total)*100);\n        }\n    }\n});\n\nfrappe.ui.form.on('Sales Order', {\n    refresh(frm) {\n    setTimeout(() => {\n        frm.remove_custom_button('Pick List', 'Create');\n        frm.remove_custom_button('Subscription', 'Create');\n        frm.remove_custom_button('Payment Request', 'Create');\n        frm.remove_custom_button('Project', 'Create');\n        frm.remove_custom_button('Request for Raw Materials', 'Create');\n        frm.remove_custom_button('Purchase Order', 'Create');\n        frm.remove_custom_button('Sales Invoice', 'Create');\n        frm.remove_custom_button('Material Request', 'Create');\n        frm.remove_custom_button('Work Order', 'Create');\n        }, 10);\n    }\n});\n\n\nfrappe.ui.form.on('Sales Order', {\n    refresh(frm) {\n    setTimeout(() => {\n      if (frm.doc.grand_total > frm.doc.advance_paid) \n        frm.remove_custom_button(\"Delivery Note\", 'Create');\n    }\n)}});\n\n\n\n\ncur_frm.set_query(\"sales_type\", function () {\n    return {\n        filters: {\n            name: [\"in\", [\"Project\", \"Property\"]]\n        }\n    };\n});",
  "view": "Form"
 }
]